{
  "comments": [
    {
      "key": {
        "uuid": "0271bf46_89f4dc9b",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 331,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T08:35:06Z",
      "side": 1,
      "message": "should this be 30 for consistency with prior elements ?",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "067ea44d_0c02b7a3",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 331,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T09:16:18Z",
      "side": 1,
      "message": "Might be valid. Should be kept in mind. But I would adapt the timeout value as part of the according Gem/TCont-Delete stories, when it is finally clear, what the according processing efforts really are.",
      "parentUuid": "0271bf46_89f4dc9b",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47b1e583_8a938100",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 331,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T09:29:02Z",
      "side": 1,
      "message": "+1, how is this done in python version ? is it hardcoded ? wondering if there is magic for configuration or exponential backoff strategy here.",
      "parentUuid": "067ea44d_0c02b7a3",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "146970cd_cc8b83e4",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 331,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T10:47:17Z",
      "side": 1,
      "message": "Python code is kept much more simple here. All processing is done sequentially. Timeouts are only used for individual OMCI frames to be sent/response to be received.\nThe timeout here is just an internal protection for the used wait group mutex to ensure its release in unexpected blocking situations.",
      "parentUuid": "47b1e583_8a938100",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1ebbd8f_449d32f9",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 331,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T12:16:44Z",
      "side": 1,
      "message": "I see, sounds good to leave as is then.",
      "parentUuid": "146970cd_cc8b83e4",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e52edc17_c706d71c",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T08:35:06Z",
      "side": 1,
      "message": "you mean that while this call arrives there could be some pending flow config ? at least in VOLTHA the tech profile configuration is done at the beginning and is kinda \"sed and forget\" I don\u0027t expect this to be changing.",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b510e74_139e1a41",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T09:16:18Z",
      "side": 1,
      "message": "TechProfile and flow configuration seem to arrive at OnuAdapter in parallel. Moreover in the Go Adapter we acknowledge the TechProfile configuration already before all the processing is done. So at the point that this process is finished, the flow configuration might also already be stored in the adapter. Also already the python code supported the flow update at this point.",
      "parentUuid": "e52edc17_c706d71c",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e06c388_098f5336",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T09:29:02Z",
      "side": 1,
      "message": "I did not get what you mean with \"in the Go Adapter we acknowledge the TechProfile configuration already before all the processing is done\" can you explain ?",
      "parentUuid": "1b510e74_139e1a41",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bd3a5ae_115a7b1c",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T10:47:17Z",
      "side": 1,
      "message": "TechProfile config processing as message request from OLT adapter is acknowledged/responded shortly after some basic message content processing. The response allows the OLT adapter to continue with whatever comes next already. The main related processing - meaning the analysis of the TechProfile content and its translation to the required sequence of OMCI messages is done in background (and will take a while to be finished after the response has already been sent).",
      "parentUuid": "6e06c388_098f5336",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4dbb1f1_ed055021",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T12:16:44Z",
      "side": 1,
      "message": "what happens when there is a failure in the tech profile handling then ?",
      "parentUuid": "6bd3a5ae_115a7b1c",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fa1d1f4_43921d5e",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T14:12:24Z",
      "side": 1,
      "message": "See comments in line 288 to 292\nIf it is not possible to live with \u0027ok\u0027 response and if we can\u0027t find a way to handle a \u0027late\u0027 error indication\u0027, then we have to skip the concurrent approach here and to do it sequentially. I am not sure what effect this would really have on the system processing time - it depends on how the OLT adapter controls the configuration of the tech profiles for the OnuAdapter (already concurrent in respect to different ONU\u0027s?). \nIn the end sequential treatment would make this processing a bit easier. Perhaps we should make some test evaluation on this - which will take some time for the \u0027sequential\u0027 processing to implement and test within some specific test context ...",
      "parentUuid": "f4dbb1f1_ed055021",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66e06fa9_76c44cd6",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-23T06:59:29Z",
      "side": 1,
      "message": "As discussed offline - I spent some more thoughts on a more sequential treatment in order to being able to provide the result of all the processing in the InterAdapter message response. Basically now I would stay with the given background processing. The used (looplab) FSM also runs in background and I would not want to start modifications on that (or search some other FSM implementation). So instead I\u0027ll keep the background processing but will delay the answer until the processing is finished to include success/error - first with some internal test version to observe the general timing behavior ...",
      "parentUuid": "1fa1d1f4_43921d5e",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07ea2461_b6e0a4d2",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-23T10:53:15Z",
      "side": 1,
      "message": "sounds good, will it come in this patch ?",
      "parentUuid": "66e06fa9_76c44cd6",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a352054a_64e72b36",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-23T12:27:02Z",
      "side": 1,
      "message": "That does not matter to me. If we want to wait still some time with the patch I could also update the code here (if the delayed response proves working).",
      "parentUuid": "07ea2461_b6e0a4d2",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccc441eb_2a165d55",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-23T12:28:47Z",
      "side": 1,
      "message": "I\u0027ll merge as is and you can fix this and the error return in upcoming patches.",
      "parentUuid": "a352054a_64e72b36",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd793abc_4711b440",
        "filename": "internal/pkg/onuadaptercore/omci_ani_config.go",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000513
      },
      "writtenOn": "2020-07-22T08:57:47Z",
      "side": 1,
      "message": "Dot1Mapper means IEEE 802.1p mapper. am I wrong?",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1969dc73_111202cf",
        "filename": "internal/pkg/onuadaptercore/omci_ani_config.go",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T09:20:59Z",
      "side": 1,
      "message": "Yes, maybe somewhere here in comments also only called mapper ...",
      "parentUuid": "bd793abc_4711b440",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28a3c0f4_4aa5545d",
        "filename": "internal/pkg/onuadaptercore/omci_ani_config.go",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1000513
      },
      "writtenOn": "2020-07-22T12:07:04Z",
      "side": 1,
      "message": "If we use one name format It\u0027ll be clear for us. But It\u0027s okay for me.",
      "parentUuid": "1969dc73_111202cf",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee1d19aa_d66e7825",
        "filename": "internal/pkg/onuadaptercore/omci_ani_config.go",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1000513
      },
      "writtenOn": "2020-07-22T08:57:47Z",
      "side": 1,
      "message": "tcont0ID and gemPortXID is same current python code base. Maybe We can apply same approach here.",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8982324_d6a3147a",
        "filename": "internal/pkg/onuadaptercore/omci_ani_config.go",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T09:20:59Z",
      "side": 1,
      "message": "Yes - valid for first GemPort only of course. I also would not want to leave that scheme - as long as not needed. But at this code position here the T-Cont is referenced, and here the value must be used that the ONU announced in its MibUpload. This still has to be done.",
      "parentUuid": "ee1d19aa_d66e7825",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f989782_c41bf0dd",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T08:35:06Z",
      "side": 1,
      "message": "possibly worth returning the error instead of simply logging. valid for all methods in this class.",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb5437f5_c9237036",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T09:16:18Z",
      "side": 1,
      "message": "In this case nil is already the indication for some error, while in a success case the pointer to the meInstance s returned. Also already taken into consideration accordingly by the caller.",
      "parentUuid": "1f989782_c41bf0dd",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "253070bb_31914494",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T09:29:02Z",
      "side": 1,
      "message": "as a best practice in go nil return does mean successful run of the method, so please add the error return, otherwise it goes against go code standards and lowers maintainability in the future",
      "parentUuid": "eb5437f5_c9237036",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df0792de_84276dc3",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T10:47:17Z",
      "side": 1,
      "message": "I would not judge that returning nil pointer is against go code standards, at least I did not see any such comments so far in my web searches. It is legitimate to just a return some nil pointer, of course it requires the corresponding check on the caller side (if needed there). On the caller side (in our adapter code) we have additional comments that indicate some possibility to improve the processing there, but that is not essentially needed (and shifted to later general improvements). \nThe alternative would just be to return an error code and the pointer (which may not be nil if the error code is nil). I am not sure, if that is what you want. For me this is just extra programming effort and unneeded run-time. \nI also do not see any issue with code maintainability here. Users of the omci_cc send functions have just to be aware that the returned pointer might be nil (something that always should be considered).\nIf you still think that simply returning a nil pointer is not a good approach, then more code positions are theoretically affected and should be changed as well, e.g. the creation of new class instances like the handler itself. This then is programming style used also on other components, like the OLT adapter... We should perhaps do that then as part of a separate story.",
      "parentUuid": "253070bb_31914494",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ced692e3_c4150f51",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-07-22T12:16:44Z",
      "side": 1,
      "message": "returning a nil pointer to me is ok if there is an error, otherwise we shoudl always return an instance of the object. See https://blog.golang.org/error-handling-and-go \nthe way it\u0027s usually done is that a successful run returns\nelement, nil\nan unseccesfull one instead:\nnil, error\nand the check is\nvalue, err :\u003d function() err !\u003d nil {\n}\nthis way you never consider the pointer of the value but just the error.\nI think that anywhere an error yields a nil return this is the way that needs to be done.",
      "parentUuid": "df0792de_84276dc3",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb0f79a9_8d6ddc0a",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 2
      },
      "lineNbr": 671,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-22T14:12:24Z",
      "side": 1,
      "message": "Meanwhile I made some short offline tests comparing timing behavior between single and double return functions and inspecting their error indication. Surprisingly there was no real increase in processing time visible with the double return handling (with my rough measurement). \nThat assumed I would agree to modifying this interface, but I would suggest to do it within a different story, modification effort is not that low here.",
      "parentUuid": "ced692e3_c4150f51",
      "revId": "3dbcdd2be27ae8e672b5e0561b151f57bc8fcf20",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    }
  ]
}