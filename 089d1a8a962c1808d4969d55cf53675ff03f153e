{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "79217969_275453b8",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2022-03-14T10:23:31Z",
      "side": 1,
      "message": "shoudl we make these configurable ? (can be done in a separate patch as well)",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 324,
        "endChar": 2
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321bebd9_afb20afd",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T12:32:45Z",
      "side": 1,
      "message": "Since the subsequent encoding is now based on relaxed decoding, this is not recommended in my opinion.",
      "parentUuid": "79217969_275453b8",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 324,
        "endChar": 2
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceda4a61_64474e1a",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2022-03-14T14:18:13Z",
      "side": 1,
      "message": "understood",
      "parentUuid": "321bebd9_afb20afd",
      "range": {
        "startLine": 321,
        "startChar": 0,
        "endLine": 324,
        "endChar": 2
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b623fb3_0f748d11",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 392,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2022-03-14T10:23:31Z",
      "side": 1,
      "message": "there is a case where isSuccessfulResponse is false so we shoudl log that.",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e046de10_b974f28a",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 392,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T12:32:45Z",
      "side": 1,
      "message": "The question is whether an additional log would also provide more information here, since all OMCI packets whose types are not defined in responsesWithMibDataSync[] do not contribute to the MDS counter increase here by default?",
      "parentUuid": "0b623fb3_0f748d11",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3bff56d_e3eb0682",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 392,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2022-03-14T14:18:13Z",
      "side": 1,
      "message": "I\u0027d add it and log the fact that we are not incrementing the counter, I do not like simply hiding something",
      "parentUuid": "e046de10_b974f28a",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf151d32_d4575805",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 392,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T15:19:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c3bff56d_e3eb0682",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2da9e842_9f38dedd",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2022-03-14T10:23:31Z",
      "side": 1,
      "message": "what do we do in other error case ? valid for all other scenarios",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4396ff90_0f25c906",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T12:32:45Z",
      "side": 1,
      "message": "Special handling is provided here only for the layer decoding response \"LayerTypeUnknownAttributes\" - as included in Chip\u0027s example. As I understand it, this decoding response is only relevant for the LayerTypes Set- and GetResponse - apart from the type \"LayerTypeMibUploadNextResponse\", where the treatment is done separately later.\n\n@Chip: Can you think of any other layer decoding error cases that should be handled here independently?",
      "parentUuid": "2da9e842_9f38dedd",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2c040a5_cf0eeb3c",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1000617
      },
      "writtenOn": "2022-03-14T13:50:26Z",
      "side": 1,
      "message": "Probably no additional decoding errors to check for right no in MIB Upload Next response.\n\nFor Set Response, there is not any relaxed decode Unknown attributes that should since it does not contain any attributes, just attribute bitmasks.",
      "parentUuid": "4396ff90_0f25c906",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dec7db7c_2db6e37c",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2022-03-14T14:18:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e2c040a5_cf0eeb3c",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8e363c9_27573f70",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T15:19:46Z",
      "side": 1,
      "message": "See my comment below. What happens if the ONU corrupts the attribute bitmask of a set response - does the omci-lib-go evaluate the mask before passing it to the caller?",
      "parentUuid": "dec7db7c_2db6e37c",
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9226d3c_bbb8897a",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4632,
      "author": {
        "id": 1000617
      },
      "writtenOn": "2022-03-14T14:02:05Z",
      "side": 1,
      "message": "Do you need the check for Unknown attributes here?  \n\nThe OpenONU adapter is responsible for setting the attributes mask that it wants and therefore should not receive any Unknown Attributes in the response.  Only in a MIB Upload Next response do you have a chance for unknown attributes to be present (due to new standard, ONU with vendor specific fixes/bugs, or a bug in the omci-lib-go code-generated attributes that are available.)",
      "range": {
        "startLine": 4632,
        "startChar": 13,
        "endLine": 4632,
        "endChar": 34
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c107e39_ddd637a0",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4632,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T15:19:46Z",
      "side": 1,
      "message": "The original reason for introducing these changes here was that ONU sent us a corrupted OMCI response. It could just as well be that the attribute bitmasks is also corrupted in their responses. What does the omci-lib-go do, for example, if the ONU falsifies the attribute bitmasks of a get response in such a way that it contains supposedly unknown attributes? Wouldn\u0027t it be appropriate for the omci-lib-go to insert an unknownAttrLayer?",
      "parentUuid": "d9226d3c_bbb8897a",
      "range": {
        "startLine": 4632,
        "startChar": 13,
        "endLine": 4632,
        "endChar": 34
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f418a90_81cad20f",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4645,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2022-03-14T12:32:45Z",
      "side": 1,
      "message": "@Chip: Does it make sense at all to perform the DecodeFailure handling here even in the case when the message layer could be decoded, albeit with errors during relaxed decoding?",
      "range": {
        "startLine": 4645,
        "startChar": 3,
        "endLine": 4645,
        "endChar": 6
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9badde55_9d982c23",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4645,
      "author": {
        "id": 1000617
      },
      "writtenOn": "2022-03-14T14:02:05Z",
      "side": 1,
      "message": "Having it here should be okay.  \n\nSince you are turning on lazy decode, you need to check for a new error layer where the message-type layers are decoded.  This function handles a few but for the message-type handlers for the other message-types not handled by this function may end up getting a decode error.",
      "parentUuid": "2f418a90_81cad20f",
      "range": {
        "startLine": 4645,
        "startChar": 3,
        "endLine": 4645,
        "endChar": 6
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d9b7bf1_1b0cbdba",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4687,
      "author": {
        "id": 1000617
      },
      "writtenOn": "2022-03-14T13:50:26Z",
      "side": 1,
      "message": "For a set response, also check for a return type of AttributeFailure (9) and any successfully set attributes.  For this you need the original SET request attribute mask.  If request.AttributeMaskMask !\u003d (response.UnsupportedAttributeMask | respose.FailedAttributeMask), then you know at least one attribute did get set so you need to increment MIB Sync.\n\nThis can be found in NOTE 1 of Table 11.2.2-1 -- OMCI message types\n\nIt looks like in the 2.9 version of the adapter, you did a check similar to this on line 4417 but did not check to both the Unsupported and Failed bitmask against the original.  If no attributes got set, then MDS is not incremented",
      "range": {
        "startLine": 4687,
        "startChar": 22,
        "endLine": 4687,
        "endChar": 33
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "697532ed_14d4eb7c",
        "filename": "internal/pkg/common/omci_cc.go",
        "patchSetId": 1
      },
      "lineNbr": 4687,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2022-03-14T15:09:54Z",
      "side": 1,
      "message": "Concerning Set response handling: This is a bit delicate ;-). \nThe question is how in the ONU Adapter we treat the response.result AttributeFailure (with possible indication of a subset of executed attributes): I assume that in any further processing we do not accept a partly execution of the command. As long as this holds I think we also do not need to react on some AttributeFailure indication here. We just interprete this response as \u0027not done\u0027. That might moreover be more helpful in case of MDS supervision to try to recover from such situation by detection some MDS mismatch later. \nI agree there could be some corner cases where it might make sense to admit AttributeFailure results, but then it would be required to accept that also in the ongoing processing of the response. \nPractically for the moment I would not really see the need for such extension - and would recommend such only in case it should pop-up with one-or-another ONU.",
      "parentUuid": "9d9b7bf1_1b0cbdba",
      "range": {
        "startLine": 4687,
        "startChar": 22,
        "endLine": 4687,
        "endChar": 33
      },
      "revId": "089d1a8a962c1808d4969d55cf53675ff03f153e",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388"
    }
  ]
}