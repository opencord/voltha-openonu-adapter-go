{
  "comments": [
    {
      "key": {
        "uuid": "b51cb5bb_d14cfea8",
        "filename": "VERSION",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "I think we can leave version as 0.0.1-dev until we have the ONU coming up in VOLTHA",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 9
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea726c63_34fc3994",
        "filename": "adaptercoreont/device_handler.go",
        "patchSetId": 4
      },
      "lineNbr": 499,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "Seems like there are two independent state machines for a device, the OmciDevice one and the MibSync one, why is that?",
      "range": {
        "startLine": 499,
        "startChar": 4,
        "endLine": 499,
        "endChar": 26
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98a27848_40fe6af6",
        "filename": "adaptercoreont/device_handler.go",
        "patchSetId": 4
      },
      "lineNbr": 586,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "The state machine throws an error if the transition is not valid, we should check for that.",
      "range": {
        "startLine": 586,
        "startChar": 2,
        "endLine": 586,
        "endChar": 44
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f14910_bd83569d",
        "filename": "adaptercoreont/device_handler.go",
        "patchSetId": 4
      },
      "lineNbr": 609,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "Tracking down this message seems like we\u0027re sending something on a channel simply to trigger a new state change \"onuDeviceEntry.MibSyncFsm.Event(\"upload_mib\")\", what is the benefit of using a channel here?",
      "range": {
        "startLine": 603,
        "startChar": 4,
        "endLine": 609,
        "endChar": 46
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f52961a1_038ed8b7",
        "filename": "adaptercoreont/mib_sync.go",
        "patchSetId": 4
      },
      "lineNbr": 53,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "This is called by the state machine and just call another method, why do we need this proxy method?",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 57
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f4d02fe_133afc49",
        "filename": "adaptercoreont/ont_device_entry.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "Seems like the \"mibSyncFsm\" is used intstead of this mapping (with the exception of \n\nonuDeviceEntry.mibDbClass \u003d onuDeviceEntry.supportedFsms[\"mib-synchronizer\"].databaseClass\n\nreferenced below, do we still need this?",
      "range": {
        "startLine": 85,
        "startChar": 2,
        "endLine": 100,
        "endChar": 3
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44fb1a20_e3f58836",
        "filename": "adaptercoreont/openonu.go",
        "patchSetId": 4
      },
      "lineNbr": 156,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "This is probably a good way to start a thread to process mutiple message in parallel. One way that scales well in go is to simply split the messages in multiple channels (in BBSim we have one channel per ONU).\n\nThis article about that approach is very interesting: http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/",
      "range": {
        "startLine": 156,
        "startChar": 21,
        "endLine": 156,
        "endChar": 50
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "264bc13c_3dcb1ac9",
        "filename": "adaptercoreont/openonu.go",
        "patchSetId": 4
      },
      "lineNbr": 163,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "we should check for errors and log them, if we don\u0027t we\u0027ll only find the in openolt adapter, but if something is wrong in the ONU we should find it here too",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 163,
        "endChar": 48
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28594272_77b0c20f",
        "filename": "go.mod",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "we should not depend on version 1 of the proto",
      "range": {
        "startLine": 14,
        "startChar": 1,
        "endLine": 14,
        "endChar": 53
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7a5a34e_16494aec",
        "filename": "main.go",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "all the other components use log.JSON",
      "range": {
        "startLine": 63,
        "startChar": 27,
        "endLine": 63,
        "endChar": 34
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c41120_654c49ad",
        "filename": "main.go",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 1000007
      },
      "writtenOn": "2020-03-29T19:38:22Z",
      "side": 1,
      "message": "Please specify that this is the Go version of the adapter in the \"vendor\" field",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 309,
        "endChar": 59
      },
      "revId": "7a6fa28165db4b5bc8d64fd3a18d82224157b7ce",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}