{
  "comments": [
    {
      "key": {
        "uuid": "d9a2f8d3_52330d4d",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2020-10-06T14:43:40Z",
      "side": 1,
      "message": "enableUniPortStateUpdate() should not be called before omci-fsm has successfully unlocked the ports. This will be done in processUniUnlockStateDoneEvent() already.",
      "range": {
        "startLine": 594,
        "startChar": 4,
        "endLine": 594,
        "endChar": 28
      },
      "revId": "3666ce7b86dae3fbb1333548c33491cf78fb24dd",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57107186_6b54307a",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-10-06T14:54:49Z",
      "side": 1,
      "message": "but that is not called here, the UniAdminStateDone state will be issued and thus the method processUniUnlockStateDoneEvent() will not be called. Are you saying that the method deviceProcStatusUpdate() at line 1450 should have another clause that handles UniAdminStateDone with state \u003d active and calls processUniUnlockStateDoneEvent()",
      "parentUuid": "d9a2f8d3_52330d4d",
      "range": {
        "startLine": 594,
        "startChar": 4,
        "endLine": 594,
        "endChar": 28
      },
      "revId": "3666ce7b86dae3fbb1333548c33491cf78fb24dd",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "240ff6ca_1ebb416a",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2020-10-06T15:21:26Z",
      "side": 1,
      "message": "According to my understanding there is an issue with the final state of port-fsm set in case of device disable/reenable-handling. In disableDevice() as well as reEnableDevice() final state is set to UniAdminStateDone - shouldn\u0027t it be set to UniLockStateDone in disable case as well as to UniUnlockStateDone in reeanable case? deviceProcStatusUpdate() has to be extended by a clause for UniLockStateDone than.\n@Michael: Could you please comment on this?",
      "parentUuid": "57107186_6b54307a",
      "range": {
        "startLine": 594,
        "startChar": 4,
        "endLine": 594,
        "endChar": 28
      },
      "revId": "3666ce7b86dae3fbb1333548c33491cf78fb24dd",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "905874bb_e3c6b193",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-10-06T16:00:26Z",
      "side": 1,
      "message": "I think the idea  was to have a differentiation of the \u0027admin device events\u0027 between the automatic port enabling after MibDownload and any real admin state change, which e.g. may result into different activities e.g. concerning the reconcile treatment (techProfile loading after MIB download).\nSo far anyway obviously the port oper state treatment was still missing for the \u0027original admin state\u0027 changes.\nThe solution provided here in this patch is working for straight-on processing and I would propose to accept that by now as a temporary solution.\nBut as already discussed with Holger a more coharent implementation would also consider the success of the needed lock/unlock processing before informing about real state transitions. There are multiple ways to realize that, our preference being to extend deviceProcStatusUpdate with (an) according event(s) to allow for state transition transfer activities (which in my point of view also includes the connection state change to be be moved from the OMCI lock state FSM again). Here using a single event with some following state differentiation or dedicates events is just some implementation aspect with not much influence - given we still can differentiante the \u0027internal unlock\u0027.\nMy proposal is that we update the code accordingly in a later version (as it requires code update on multiple code positions/files).",
      "parentUuid": "240ff6ca_1ebb416a",
      "range": {
        "startLine": 594,
        "startChar": 4,
        "endLine": 594,
        "endChar": 28
      },
      "revId": "3666ce7b86dae3fbb1333548c33491cf78fb24dd",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7accdfa_aca921f1",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 1000116
      },
      "writtenOn": "2020-10-06T16:52:48Z",
      "side": 1,
      "message": "@Michael, agreed, that\u0027s a good optimisation. what I did is that I moved the enable/disable of the ports after the lock/unlock, at least we do thing when the ONU is in proper state. Parts fo the erro refactoring is to also return errors from that method. I added a TODO in there to track this discussion",
      "parentUuid": "905874bb_e3c6b193",
      "range": {
        "startLine": 594,
        "startChar": 4,
        "endLine": 594,
        "endChar": 28
      },
      "revId": "3666ce7b86dae3fbb1333548c33491cf78fb24dd",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    }
  ]
}