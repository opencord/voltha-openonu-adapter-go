{
  "comments": [
    {
      "key": {
        "uuid": "15577805_21bdfa7d",
        "filename": "internal/pkg/onuadaptercore/device_handler.go",
        "patchSetId": 4
      },
      "lineNbr": 484,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-07T15:44:31Z",
      "side": 1,
      "message": "General remark: What is the expected system reaction connected with the reboot? Is it expected that a separate \u0027OnuIndication:OperDown\u0027 indication (and later again ...:OperUp) is received? Then fine. Otherwise there might be some active configuration activity in the adapter, which should be terminated (maybe also before sending the reboot to the ONU) - compare updateInterface() ...",
      "revId": "98e73131c349346cd04e56372a66f3ffed55be97",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ac21915_5650af40",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 4
      },
      "lineNbr": 592,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-07T15:44:31Z",
      "side": 1,
      "message": "Probably copy/paste error: Guess you want to use RebootRequestType",
      "revId": "98e73131c349346cd04e56372a66f3ffed55be97",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f29749fa_bfe54d31",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 4
      },
      "lineNbr": 592,
      "author": {
        "id": 1000513
      },
      "writtenOn": "2020-07-08T13:09:38Z",
      "side": 1,
      "message": "yeah you\u0027re right it should be \"RebootRequestType\".",
      "parentUuid": "5ac21915_5650af40",
      "revId": "98e73131c349346cd04e56372a66f3ffed55be97",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01c010d6_cb70de43",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 4
      },
      "lineNbr": 597,
      "author": {
        "id": 1000666
      },
      "writtenOn": "2020-07-07T15:44:31Z",
      "side": 1,
      "message": "At this point - for the Callback handling (of some OMCI response) - you have to make clear, if you really want to verify the Reboot response. I\u0027m not sure if you can assume that the response is still generated by the ONU.\nBut if you want to verify it, you have to create your own \u0027RxHandler\u0027. Using MibDownloadFsm as done below would not be the right approach - MibDownloadFsm should stay (more or less) independent from the reboot request. Perhaps compare the \u0027OmciTestRequest\u0027 handling for a single OMCI activity procedure.\nIf you don\u0027t want to check the response, then we should verify, if the handler\u0027s OMCI reception task is able to go with some \u0027nil\u0027 callback...",
      "revId": "98e73131c349346cd04e56372a66f3ffed55be97",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "816fea9a_c5ce2040",
        "filename": "internal/pkg/onuadaptercore/omci_cc.go",
        "patchSetId": 4
      },
      "lineNbr": 597,
      "author": {
        "id": 1000513
      },
      "writtenOn": "2020-07-08T13:09:38Z",
      "side": 1,
      "message": "This is good point. But we don\u0027t need to response for this query. Because we don\u0027t have any action to will triggered with it.",
      "parentUuid": "01c010d6_cb70de43",
      "revId": "98e73131c349346cd04e56372a66f3ffed55be97",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    }
  ]
}